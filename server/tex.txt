import express from "express";
import routes from "./routes.js";
import mongoose from "mongoose";
import cors from "cors";
import http from "http";
import { Server } from "socket.io";
import Message from "./models/Message.js";
import User from "./models/User.js";

const app = express();
const PORT = process.env.PORT || 8000;

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors());

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});



// io.on("connection", (socket) => {
//   console.log(`User connected: ${socket.id}`);

//   socket.on("join_room", async (userId) => {
//     socket.join(userId);
//     console.log(`User ${userId} joined room ${userId}`);
//     await User.findByIdAndUpdate(userId, { online: true });
//     io.emit("statusUpdate", { userId, online: true });
//   });

//   socket.on("send_message", async (data) => {
//     const { sender, receiver, content, file, fileType, fileName, fileSize } =
//       data;
//     console.log(`User File: ${file}`);

//     const message = new Message({
//       sender,
//       receiver,
//       content,
//       file,
//       fileType,
//       fileName,
//       fileSize,
//     });

//     try {
//       await message.save();
//       io.to(receiver).emit("receive_message", message);
//       console.log(`Message from ${sender} to ${receiver}: ${content}`);
//     } catch (err) {
//       console.error("Error saving message to database", err);
//     }
//   });

//   socket.on("disconnect", async () => {
//     console.log(`User disconnected: ${socket.id}`);
//     // Assuming you store the userId in the socket session
//     const userId = socket.userId;
//     if (userId) {
//       await User.findByIdAndUpdate(userId, { online: false });
//       io.emit("statusUpdate", { userId, online: false });
//     }
//   });
// });

io.on("connection", (socket) => {
  console.log(`User connected: ${socket.id}`);

  socket.on("join_room", async (userId) => {
    socket.join(userId);
    socket.userId = userId; // Store userId in socket session
    console.log(`User ${userId} joined room ${userId}`);
    await User.findByIdAndUpdate(userId, { online: true });
    io.emit("statusUpdate", { userId, online: true });
  });

  socket.on("send_message", async (data) => {
    const {
      tempId,
      sender,
      receiver,
      content,
      file,
      fileType,
      fileName,
      fileSize,
    } = data;

    const message = new Message({
      sender,
      receiver,
      content,
      file,
      fileType,
      fileName,
      fileSize,
    });

    try {
      const savedMessage = await message.save();
      io.to(receiver).emit("receive_message", savedMessage);
      io.to(sender).emit("message_sent", { ...savedMessage._doc, tempId }); // Emit back to sender with the correct ID and tempId
      console.log(`Message from ${sender} to ${receiver}: ${content}`);
    } catch (err) {
      console.error("Error saving message to database", err);
    }
  });

  socket.on("disconnect", async () => {
    console.log(`User disconnected: ${socket.id}`);
    const userId = socket.userId;
    if (userId) {
      await User.findByIdAndUpdate(userId, { online: false });
      io.emit("statusUpdate", { userId, online: false });
    }
  });
});

// Routes
app.use("/api/auth", routes);

mongoose
  .connect("mongodb://localhost:27017", {})
  .then(() => {
    console.log("Connected to MongoDB");
    server.listen(PORT, () => {
      console.log(`Server running on port ${PORT}`);
    });
  })
  .catch((err) => {
    console.error("Failed to connect to MongoDB", err);
  });









import express from "express";
import routes from "./routes.js";
import mongoose from "mongoose";
import cors from "cors";
import http from "http";
import { Server } from "socket.io";
import Message from "./models/Message.js";
import User from "./models/User.js";
import multer from "multer";
import path, { dirname } from "path";
import { fileURLToPath } from "url";
import fs from "fs";
import { initSocket } from "./socket.js";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const app = express();
const PORT = process.env.PORT || 8000;

// Ensure uploads directory exists
const uploadsDir = path.join(__dirname, "uploads");
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir);
}

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadsDir);
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  },
});
const upload = multer({ storage });

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors());
app.use("/uploads", express.static(uploadsDir));

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"],
  },
});

// File upload endpoint
app.post("/upload", upload.single("file"), (req, res) => {
  console.log("File upload request received.");
  if (!req.file) {
    console.error("No file uploaded.");
    return res.status(400).send("No file uploaded.");
  }
  console.log("File uploaded successfully:", req.file);
  const fileUrl = `${req.protocol}://${req.get("host")}/uploads/${
    req.file.filename
  }`;
  res.json({ filePath: fileUrl });
});

io.on("connection", (socket) => {
  console.log(`User connected: ${socket.id}`);

  socket.on("join_room", async (userId) => {
    socket.join(userId);
    socket.userId = userId; // Store userId in socket session
    console.log(`User ${userId} joined room ${userId}`);
    try {
      await User.findByIdAndUpdate(userId, { online: true });
      io.emit("statusUpdate", { userId, online: true });
    } catch (err) {
      console.error("Error updating user status", err);
    }
  });

  socket.on("send_message", async (data) => {
    const {
      tempId,
      sender,
      receiver,
      content,
      file,
      fileType,
      fileName,
      fileSize,
    } = data;

    console.log("data", file);

    const message = new Message({
      sender,
      receiver,
      content,
      file,
      fileType,
      fileName,
      fileSize,
    });

    try {
      const savedMessage = await message.save();
      io.to(receiver).emit("receive_message", savedMessage);
      io.to(sender).emit("message_sent", { ...savedMessage._doc, tempId }); // Emit back to sender with the correct ID and tempId
      console.log(`Message from ${sender} to ${receiver}: ${content}`);
    } catch (err) {
      console.error("Error saving message to database", err);
    }
  });

  socket.on("disconnect", async () => {
    console.log(`User disconnected: ${socket.id}`);
    const userId = socket.userId;
    if (userId) {
      try {
        await User.findByIdAndUpdate(userId, { online: false });
        io.emit("statusUpdate", { userId, online: false });
      } catch (err) {
        console.error("Error updating user status on disconnect", err);
      }
    }
  });
});

// Routes
app.use("/api/auth", routes);

mongoose
  .connect("mongodb://localhost:27017", {})
  .then(() => {
    console.log("Connected to MongoDB");
    server.listen(PORT, () => {
      console.log(`Server running on port ${PORT}`);
    });
  })
  .catch((err) => {
    console.error("Failed to connect to MongoDB", err);
  });
